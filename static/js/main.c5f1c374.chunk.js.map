{"version":3,"sources":["data/mutationsFiltered.csv","components/findFrequencies.js","components/FreqChart.js","components/GeneSelector.js","components/GenesSelected.js","App.js","reportWebVitals.js","index.js"],"names":["findFrequencies","gene","a","d3","mutationsFiltered","data","geneList","getGeneList","groupPatients","grouped","coefficients","geneFrequencies","getGeneFrequencies","forEach","resistant","withGene","withoutGene","sensitive","totalBalance","withGeneBalance","withoutGeneBalance","representedAcrossGeneStates","response","state","patients","coefficient","patient","symbol","addWeights","Object","values","genes","map","g","Set","d","sample_id","n","c","p","response_group","push","length","console","log","keys","dependent","FreqChart","frequencies","dimensions","setSelectedGenes","followMouseMove","useRef","svgXcoordinate","xBandWidth","scales","enterPointCode","exitPointCode","svgRef","chartRef","xAxis","yAxis","freq","selectionBox","useState","enterPoint","setEnterPoint","exitPoint","setExitPoint","useEffect","getCoordinatesInChart","event","x","clientX","current","width","addEventListener","document","domain","enterPointIndex","Math","round","exitPointIndex","min","max","genesSelected","slice","sort","b","range","paddingInner","paddingOuter","y","height","step","axes","tickValues","line","transition","call","xAxisLine","selectAll","enter","append","attr","merge","getBoundingClientRect","linePlot","ref","svgWidth","svgHeight","className","transform","margins","left","top","viewBox","abs","GeneSelector","onChange","id","target","value","i","GenesSelected","selectedGenes","join","DIMENSIONS","bottom","right","App","setGeneList","setFreq","setGene","pipeData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c5f1c374.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mutationsFiltered.2a73bbda.csv\";","import * as d3 from \"d3\";\r\nimport mutationsFiltered from \"../data/mutationsFiltered.csv\";\r\nconst NOMINATOR = 1000;\r\n\r\nexport default async function findFrequencies(gene) {\r\n  const data = await d3.csv(mutationsFiltered);\r\n  const geneList = getGeneList(data);\r\n  const { grouped, coefficients } = groupPatients(data, gene);\r\n  const geneFrequencies = getGeneFrequencies(geneList, grouped, coefficients);\r\n  return { geneFrequencies, geneList };\r\n}\r\n\r\nfunction getGeneFrequencies(geneList, grouped, coefficients) {\r\n  let geneFrequencies = {};\r\n  geneList.forEach(\r\n    (gene) =>\r\n      (geneFrequencies[gene] = {\r\n        resistant: {\r\n          withGene: 0,\r\n          withoutGene: 0,\r\n        },\r\n        sensitive: {\r\n          withGene: 0,\r\n          withoutGene: 0,\r\n        },\r\n        gene,\r\n        totalBalance: 0,\r\n        withGeneBalance: 0,\r\n        withoutGeneBalance: 0,\r\n        representedAcrossGeneStates: false,\r\n      })\r\n  );\r\n\r\n  [\"resistant\", \"sensitive\"].forEach((response) =>\r\n    [\"withGene\", \"withoutGene\"].forEach((state) => {\r\n      addWeights(\r\n        response,\r\n        state,\r\n        geneFrequencies,\r\n        grouped[response][state],\r\n        coefficients[response][state][\"c\"]\r\n      );\r\n    })\r\n  );\r\n\r\n  geneList.forEach((gene) => {\r\n    geneFrequencies[gene][\"withGeneBalance\"] =\r\n      geneFrequencies[gene][\"resistant\"][\"withGene\"] -\r\n      geneFrequencies[gene][\"sensitive\"][\"withGene\"];\r\n    geneFrequencies[gene][\"withoutGeneBalance\"] =\r\n      geneFrequencies[gene][\"resistant\"][\"withoutGene\"] -\r\n      geneFrequencies[gene][\"sensitive\"][\"withoutGene\"];\r\n    geneFrequencies[gene][\"totalBalance\"] =\r\n      geneFrequencies[gene][\"withGeneBalance\"] -\r\n      geneFrequencies[gene][\"withoutGeneBalance\"];\r\n    geneFrequencies[gene][\"representedAcrossGeneStates\"] =\r\n      geneFrequencies[gene][\"resistant\"][\"withGene\"] +\r\n        geneFrequencies[gene][\"sensitive\"][\"withGene\"] !==\r\n        0 &&\r\n      geneFrequencies[gene][\"resistant\"][\"withoutGene\"] +\r\n        geneFrequencies[gene][\"sensitive\"][\"withoutGene\"] !==\r\n        0;\r\n  });\r\n\r\n  return Object.values(geneFrequencies);\r\n}\r\n\r\nfunction addWeights(response, state, geneFrequencies, patients, coefficient) {\r\n  patients.forEach((patient) => {\r\n    patient.forEach((gene) => {\r\n      geneFrequencies[gene.symbol][response][state] += coefficient;\r\n    });\r\n  });\r\n}\r\n\r\nfunction getGeneList(data) {\r\n  const genes = data.map((g) => g.symbol);\r\n  return [...new Set(genes)];\r\n}\r\n\r\nfunction groupPatients(data, gene) {\r\n  let patients = d3.group(data, (d) => d.sample_id);\r\n  let grouped = {\r\n    resistant: {\r\n      withGene: [],\r\n      withoutGene: [],\r\n    },\r\n    sensitive: {\r\n      withGene: [],\r\n      withoutGene: [],\r\n    },\r\n  };\r\n  let coefficients = {\r\n    resistant: {\r\n      withGene: {\r\n        n: 0,\r\n        c: 0,\r\n      },\r\n      withoutGene: {\r\n        n: 0,\r\n        c: 0,\r\n      },\r\n    },\r\n    sensitive: {\r\n      withGene: {\r\n        n: 0,\r\n        c: 0,\r\n      },\r\n      withoutGene: {\r\n        n: 0,\r\n        c: 0,\r\n      },\r\n    },\r\n  };\r\n  patients.forEach((p) => {\r\n    let resistant = false;\r\n    let withGene = false;\r\n    p.forEach((g) => {\r\n      if (g.symbol === gene) {\r\n        withGene = true;\r\n      }\r\n      if (g.response_group === \"resistant\") {\r\n        resistant = true;\r\n      }\r\n    });\r\n    if (resistant & withGene) {\r\n      grouped.resistant.withGene.push(p);\r\n      coefficients.resistant.withGene.n += p.length;\r\n    } else if (resistant & !withGene) {\r\n      grouped.resistant.withoutGene.push(p);\r\n      coefficients.resistant.withoutGene.n += p.length;\r\n    } else if (!resistant & withGene) {\r\n      grouped.sensitive.withGene.push(p);\r\n      coefficients.sensitive.withGene.n += p.length;\r\n    } else if (!resistant & !withGene) {\r\n      grouped.sensitive.withoutGene.push(p);\r\n      coefficients.sensitive.withoutGene.n += p.length;\r\n    } else {\r\n      console.log(\"patients w/o a group found\", p);\r\n    }\r\n  });\r\n  Object.keys(coefficients).forEach((response) =>\r\n    Object.keys(coefficients[response]).forEach((state) => {\r\n      coefficients[response][state].c =\r\n        NOMINATOR / coefficients[response][state].n;\r\n    })\r\n  );\r\n\r\n  return {\r\n    grouped,\r\n    coefficients,\r\n  };\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst dependent = \"totalBalance\";\r\n\r\nexport default function FreqChart({\r\n  frequencies,\r\n  dimensions,\r\n  setSelectedGenes,\r\n}) {\r\n  let followMouseMove = useRef(false);\r\n  let svgXcoordinate = useRef(0);\r\n  let xBandWidth = useRef(0);\r\n  let scales = useRef(null);\r\n  let enterPointCode = useRef(null);\r\n  let exitPointCode = useRef(null);\r\n  let svgRef = useRef(null);\r\n  let chartRef = useRef(null);\r\n  let xAxis = useRef(null);\r\n  let yAxis = useRef(null);\r\n  let freq = useRef(null);\r\n  let selectionBox = useRef(null);\r\n\r\n  const [enterPoint, setEnterPoint] = useState(0);\r\n  const [exitPoint, setExitPoint] = useState(0);\r\n\r\n  useEffect(() => {\r\n    function getCoordinatesInChart(event) {\r\n      let x = event.clientX - svgXcoordinate.current;\r\n      if (x < 0) {\r\n        x = 0;\r\n      } else if (x > dimensions.width) {\r\n        x = dimensions.width;\r\n      }\r\n      return x;\r\n    }\r\n\r\n    svgRef.current.addEventListener(\"mousedown\", (event) => {\r\n      let x = getCoordinatesInChart(event);\r\n      setEnterPoint(x);\r\n      setExitPoint(x);\r\n      followMouseMove.current = true;\r\n      enterPointCode.current = x;\r\n      exitPointCode.current = x;\r\n    });\r\n\r\n    svgRef.current.addEventListener(\"mousemove\", (event) => {\r\n      if (followMouseMove.current) {\r\n        let x = getCoordinatesInChart(event);\r\n        setExitPoint(x);\r\n        exitPointCode.current = x;\r\n      }\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", () => {\r\n      if (scales) {\r\n        followMouseMove.current = false;\r\n        let genes = scales.current.x.domain();\r\n        let enterPointIndex = Math.round(\r\n          enterPointCode.current / xBandWidth.current\r\n        );\r\n        let exitPointIndex = Math.round(\r\n          exitPointCode.current / xBandWidth.current\r\n        );\r\n        let min = d3.min([enterPointIndex, exitPointIndex]);\r\n        let max = d3.max([enterPointIndex, exitPointIndex]);\r\n        max = d3.min([max, genes.length]);\r\n        let genesSelected = genes.slice(min, max);\r\n        setSelectedGenes(genesSelected);\r\n      }\r\n    });\r\n  }, [scales, dimensions, setSelectedGenes]);\r\n\r\n  useEffect(() => {\r\n    if (!frequencies) {\r\n      return;\r\n    }\r\n\r\n    freq.current = frequencies.sort((a, b) => b[dependent] - a[dependent]);\r\n\r\n    scales.current = {\r\n      x: d3\r\n        .scaleBand()\r\n        .domain(freq.current.map((d) => d.gene))\r\n        .range([0, dimensions.width])\r\n        .paddingInner(0)\r\n        .paddingOuter(0),\r\n      y: d3\r\n        .scaleLinear()\r\n        .domain(d3.extent(freq.current, (d) => d[dependent]))\r\n        .range([dimensions.height, 0]),\r\n    };\r\n\r\n    xBandWidth.current = scales.current.x.step();\r\n\r\n    let axes = {\r\n      x: d3.axisBottom(scales.current.x).tickValues([]),\r\n      y: d3.axisLeft(scales.current.y),\r\n    };\r\n\r\n    let line = d3\r\n      .line()\r\n      .x((d) => scales.current.x(d.gene))\r\n      .y((d) => scales.current.y(d[dependent]));\r\n\r\n    d3.select(yAxis.current).transition().call(axes.y);\r\n    let xAxisLine = d3.select(xAxis.current).selectAll(\".xAxisLine\").data([0]);\r\n    xAxisLine\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"xAxisLine\")\r\n      .merge(xAxisLine)\r\n      .attr(\"x1\", 0)\r\n      .attr(\"x2\", dimensions.width)\r\n      .attr(\"stroke-width\", 0.5)\r\n      .attr(\"stroke\", \"black\")\r\n      .transition()\r\n      .attr(\"y1\", scales.current.y(0))\r\n      .attr(\"y2\", scales.current.y(0));\r\n\r\n    svgXcoordinate.current = chartRef.current.getBoundingClientRect().x;\r\n\r\n    let linePlot = d3\r\n      .select(chartRef.current)\r\n      .selectAll(\".linePlot\")\r\n      .data([freq.current]);\r\n    linePlot\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"class\", \"linePlot\")\r\n      .merge(linePlot)\r\n      .transition()\r\n      .attr(\"d\", line)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"steelblue\")\r\n      .attr(\"stroke-width\", 1.5);\r\n  }, [frequencies, chartRef, freq, dimensions, xAxis, yAxis]);\r\n\r\n  return (\r\n    <>\r\n      <svg\r\n        ref={svgRef}\r\n        width={dimensions.svgWidth}\r\n        height={dimensions.svgHeight}\r\n      >\r\n        <g\r\n          ref={yAxis}\r\n          className=\"yAxis\"\r\n          transform={`translate(${dimensions.margins.left}, ${dimensions.margins.top})`}\r\n        ></g>\r\n        <g\r\n          ref={chartRef}\r\n          transform={`translate(${dimensions.margins.left}, ${dimensions.margins.top})`}\r\n          viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}\r\n        >\r\n          <rect\r\n            ref={selectionBox}\r\n            className=\"selectionBox\"\r\n            width={Math.abs(enterPoint - exitPoint)}\r\n            height={dimensions.height}\r\n            transform={`translate(${\r\n              enterPoint < exitPoint ? enterPoint : exitPoint\r\n            },0)`}\r\n          />\r\n          <g ref={xAxis}> </g>\r\n        </g>\r\n      </svg>\r\n    </>\r\n  );\r\n}\r\n","export default function GeneSelector({ geneList, onChange }) {\r\n  geneList = geneList.sort();\r\n\r\n  const handleChange = (event) => {\r\n    onChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <select id=\"geneSelector\" onChange={handleChange} className=\"geneSelector\">\r\n      <option key={-1} value=\"TP53\">\r\n        TP53\r\n      </option>\r\n      {geneList.map((gene, i) => (\r\n        <option key={i} value={gene}>\r\n          {gene}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function GenesSelected({ selectedGenes }) {\r\n    return <>\r\n        <div className=\"selectedGenesBox\">{selectedGenes.join(\"\\r\\n\")}</div>\r\n        </>\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport findFrequencies from \"./components/findFrequencies.js\";\nimport FreqChart from \"./components/FreqChart.js\";\nimport GeneSelector from \"./components/GeneSelector.js\";\nimport GenesSelected from \"./components/GenesSelected.js\";\nimport \"./App.css\";\n\nlet DIMENSIONS = {\n  svgWidth: 500,\n  svgHeight: 400,\n  margins: { top: 10, left: 30, bottom: 10, right: 10 },\n};\n\nDIMENSIONS = {\n  ...DIMENSIONS,\n  width:\n    DIMENSIONS.svgWidth - DIMENSIONS.margins.left - DIMENSIONS.margins.right,\n  height:\n    DIMENSIONS.svgHeight - DIMENSIONS.margins.top - DIMENSIONS.margins.bottom,\n};\n\nexport default function App() {\n  const [geneList, setGeneList] = useState([\"loading\"]);\n  const [frequencies, setFreq] = useState(null);\n  const [gene, setGene] = useState(\"TP53\");\n  const [selectedGenes, setSelectedGenes] = useState([]);\n\n  useEffect(() => {\n    async function pipeData() {\n      let { geneFrequencies, geneList } = await findFrequencies(gene);\n      setFreq(geneFrequencies, geneList);\n      setGeneList(geneList);\n    }\n    pipeData();\n  }, [gene]);\n\n  return (\n    <>\n      <h1>Genes combinations in Paclitaxel resistance</h1>\n      <p>Choose a background gene. {geneList.length} genes in total.</p>\n      <GeneSelector geneList={geneList} onChange={setGene} />\n      <p></p>\n      <FreqChart\n        frequencies={frequencies}\n        dimensions={DIMENSIONS}\n        setSelectedGenes={setSelectedGenes}\n      />\n      <GenesSelected selectedGenes={selectedGenes} />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}